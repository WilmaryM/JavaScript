//Creacion de una clase y sus partes

/*No es posible crear objetos antes de declarar la clase
no se aplica el concepto de hoisting*/
//let persona2 = new Persona('Maria', 'Mendez');

class Persona{
    constructor(nombre, apellido){
        this.nombre = nombre;
        this.apellido = apellido;
    }
}

let persona1 = new Persona('Juan', 'Perez');
console.log(persona1.nombre);//get nombre

console.log(persona1);

let persona2 = new Persona('Carlos', 'Lara');
console.log(persona2);

------------------------------------------------------


class Persona{

    static contadorObejtosPersona = 0;//Atributo de nuesta clase

    email = 'Valor default email'; //atributo de nuestos objetos

    constructor(nombre, apellido){
        this._nombre = nombre;
        this._apellido = apellido;
        Persona.contadorObejtosPersona++;
        console.log( 'Se incrementa contador: ' + Persona.contadorObejtosPersona);
    }

    get nombre(){
        return this._nombre;
    }

    set nombre(nombre){
        this._nombre = nombre;
    }

    get apellido(){
        return this._apellido = apellido;
    }

    set apellido(apellido){
        this._apellido = apellido;
    }

    nombreCompleto(){
        return this._nombre + ' ' + this._apellido;
    }
    //Sobreescribiendo el metodo de la clase Padre (Objeto)
    toString(){
        //se aplica poliformismo(MUltiples formas en tiempo de ejecucion)
        //el metodo que se ejecuta depende si es una refrencia de tipo padre
        //o de tipo hijo
        return this.nombreCompleto();
    }

    static saludar(){
        console.log('Saludos desde metodo static');
    }

    static saludar2(persona){
        console.log(persona._nombre + ' ' + persona._apellido);
    }
}




class Empleado extends Persona{
    constructor(nombre, apellido, departamento){
        super(nombre, apellido)//llamar al constructor de la clase padre
        this._departamento = departamento;
    }

    get departamento(){
        return this._departamento;
    }

    set departamento(departamento){
        this._departamento = departamento;
    }

    //sobrescritura
    nombreCompleto(){
        //maneras de hacerlo
        //return this._nombre + ' ' + this._apellido + ', ' + this._departamento;
        return super.nombreCompleto() + ', ' + this._departamento;
    }
}

let persona1 = new Persona('Juan', 'Perez');
console.log(persona1.toString());//get nombre

let empleado1 = new Empleado('Maria', 'Jimenes', 'Sistemas');
console.log(empleado1);
console.log(empleado1.nombre);
console.log(empleado1.nombreCompleto());
console.log(empleado1.toString());

// no es posible llamar un static desde un objeto console.log(persona1.saludar());
//pero si mediante una clase
Persona.saludar();
Persona.saludar2(persona1);

Empleado.saludar();
Empleado.saludar2(empleado1);

console.log(persona1.contadorObejtosPersona);
console.log(Persona.contadorObejtosPersona);

console.log(Empleado.contadorObejtosPersona);

console.log(persona1.email);

console.log(empleado1.email);

console.log(Persona.email);// No aprece debido a que no es un atributo static

console.log(Empleado.email);//No aprece debido a que no es un atributo static